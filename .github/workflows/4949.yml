name: Download NicoNico Video with Comments

on:
  workflow_dispatch:
    inputs:
      video_id:
        description: 'NicoNico Video ID (e.g., sm9)'
        required: true

jobs:
  download_video:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y curl ffmpeg fonts-migmix jq

      - name: Download NicoNico Video
        id: download_video
        run: |
          mkdir -p downloads
          video_id="${{ github.event.inputs.video_id }}"
          
          # Download video and audio merged into one file
          yt-dlp "https://www.nicovideo.jp/watch/${video_id}" \
            --cookies cookies.txt \
            -o "downloads/${video_id}.mp4" \
            --merge-output-format mp4

      - name: Download Comments
        id: download_comments
        run: |
          video_id="${{ github.event.inputs.video_id }}"
          # Download HTML page of the video
          html=$(curl -s "https://www.nicovideo.jp/watch/${video_id}")
          
          # Extract threadId and threadKey using regex
          thread_id=$(echo "$html" | grep -oP 'threadIds":\[\{"id":\K[0-9]+(?=,)')
          thread_key=$(echo "$html" | grep -oP '"threadKey":"\K(eyJ0eXAiOiJKV1Qi.*?)(?=")')
          
          # Create request payload for comment API
          request_payload=$(cat <<EOF
{
  "params": {
    "targets": [
      { "id": $thread_id, "fork": "owner" },
      { "id": $thread_id, "fork": "main" },
      { "id": $thread_id, "fork": "easy" }
    ],
    "language": "ja-jp"
  },
  "threadKey": "$thread_key",
  "additionals": {}
}
EOF
)

          # Get comments from the API
          response=$(curl -s -X POST -H "x-frontend-id: 6" -H "Content-Type: application/json" \
            -d "$request_payload" \
            "https://public.nvcomment.nicovideo.jp/v1/threads")
          
          # Save comments data to JSON file
          echo "$response" > "downloads/${video_id}_comments.json"

      - name: Overlay Comments on Video
        id: overlay_comments
        run: |
          video_path="downloads/${{ github.event.inputs.video_id }}.mp4"
          comments_path="downloads/${{ github.event.inputs.video_id }}_comments.json"
          output_path="downloads/${{ github.event.inputs.video_id }}_with_comments.mp4"
          font_path="/usr/share/fonts/opentype/migmix/migmix-1p-regular.ttf"
          
          # Load comments data from JSON
          comments_data=$(cat "$comments_path")

          # Generate ASS subtitle file
          ass_file="downloads/comments.ass"
          echo "[Script Info]" > "$ass_file"
          echo "Title: NicoNico Comments" >> "$ass_file"
          echo "ScriptType: v4.00+" >> "$ass_file"
          echo "Collisions: Normal" >> "$ass_file"
          echo "PlayDepth: 0" >> "$ass_file"
          echo "" >> "$ass_file"
          echo "[V4+ Styles]" >> "$ass_file"
          echo "Format: Name, Fontname, Fontsize, PrimaryColour, BackColour, Bold, Italic, Underline, StrikeOut, ScaleX, ScaleY, Spacing, Angle, BorderStyle, Outline, Shadow, Alignment, MarginL, MarginR, MarginV, Encoding" >> "$ass_file"
          echo "Style: Default,$font_path,20,&H00FFFFFF,&H00000000,0,0,0,0,100,100,0,0,1,1,1,2,10,10,10,1" >> "$ass_file"
          echo "" >> "$ass_file"
          echo "[Events]" >> "$ass_file"
          echo "Format: Layer, Start, End, Style, Name, MarginL, MarginR, MarginV, Effect, Text" >> "$ass_file"

          # Write comments to ASS file
          for thread in $(echo "$comments_data" | jq -r '.data.threads[] | @base64'); do
            comments=$(echo "$thread" | base64 --decode | jq -r '.comments')
            for comment in $(echo "$comments" | jq -r '.[] | @base64'); do
              vpos=$(echo "$comment" | base64 --decode | jq -r '.vposMs')
              body=$(echo "$comment" | base64 --decode | jq -r '.body')

              # Convert vposMs to timestamp (minutes:seconds)
              minutes=$((vpos / 60000))
              seconds=$(((vpos / 1000) % 60))
              start_time="0:${minutes}:${seconds}.00"
              end_time="0:${minutes}:${seconds + 5}.00"  # Display for 5 seconds

              # Write to ASS file
              echo "Dialogue: 0,$start_time,$end_time,Default,,0,0,0,,${body}" >> "$ass_file"
            done
          done

          # Overlay comments on video using FFmpeg
          ffmpeg -i "$video_path" -vf "ass=$ass_file" -c:v libx264 -crf 23 -preset veryfast -c:a copy "$output_path"

      - name: Upload Video and Update README
        env:
          PAT: ${{ secrets.PAT }}
        run: |
          if [ ! -f README.md ]; then
            echo "# NicoNico Video Downloads" > README.md
            echo "このリポジトリにはニコニコ動画からダウンロードした動画が含まれます。" >> README.md
            echo "" >> README.md
          fi
          echo "✅ 成功したじょ〜☆彡: ${{ github.event.inputs.video_id }}" >> README.md
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add README.md downloads/
          git commit -m "Add video and comments for ${{ github.event.inputs.video_id }}"
          git push
